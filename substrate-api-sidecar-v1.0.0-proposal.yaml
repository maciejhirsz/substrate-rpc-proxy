openapi: 3.0.0
info:
  description: |
    RESTfull HTTP microservice for communicating with a substrate based node.
  version: "1.0.0-oas3"
  title: Substrate API Sidecar
  contact:
    email: admin@parity.io
    name: Parity Technologies
  license:
    name: GNU General Public License v3.0
    url: 'https://github.com/paritytech/substrate-api-sidecar/blob/master/LICENSE'
tags:
  - name: accounts
  - name: blocks
  - name: node
    description: node connected to sidecar
  - name: pallets
    description: pallets employed in the runtime
  - name: runtime
  - name: transaction
paths:
  '/accounts/{accountId}/balance-info':
    get:
      tags:
        - accounts
      summary: Get balance summary for an address.
      description: >-
         Returns a curated grouping of values related to an accounts balance.
         Replaces `/balance/{address}` from versions < v1.0.0.
      operationId: getBalanceSummaryByAccountId
      parameters:
        - in: path
          name: accountId
          description: the account identifier, as the ss58 encoded public address.
          required: true
          schema:
            type: string
        - in: query
          name: at
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceSummary'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{accountId}/staking-info':
    get:
      tags:
      - accounts
      summary: Get a staking summary for a stash address.
      description: >-
        Returns a a curated grouping of values related to an staking accounts
        staking activity. Replaces `/staking/{address}` from versions < v1.0.0.
      operationId: getStakingSummaryByAccountId
      parameters: 
      - in: path
        name: accountId
        description: the account identifier, as the ss58 encoded public address.
        required: true
        schema:
          type: string
      - in: query
        name: at
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description:  block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStakingSummary'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{accountId}/vesting-info':
    get:
      tags:
      - accounts
      summary: Get vesting information for an address.
      description: >-
        Returns the vesting schedule for an account.
        Replaces `/vesting/{address}` from versions < v1.0.0.
      operationId: getVestingSummaryByAccountId
      parameters:
      - in: path
        name: accountId
        description: the account identifier, as the ss58 encoded public address.
        required: true
        schema:
          type: string
      - in: query
        name: at
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description:  block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountVestingSummary'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/blocks/{blockId}':
    get:
      tags:
        - blocks
      summary: Find a block by ID
      description: >-
        Returns a single block. BlockId can either be a block hash or a block
        height. Replaces `/block/{number}` from versions < v1.0.0.
      operationId: getBlockById
      parameters:
        - in: path
          name: blockId
          description:  block identifier, as the block height or block hash.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        '400':
          description: Invalid block ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Block not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /blocks/head:
    get:
      tags:
        - blocks
      summary: Get the most recently finalized block
      description: Returns the most recently finalized block
      operationId: getHeadBlock
      parameters:
      - in: query
        name: finalized
        description: >-
          Boolean representing wether or not to get the finalized head. If it
          is not set the value defaults to true. When set to false it will
          attempt to get the newest known block, which may not be finalized.
          Replaces `/block` from versions < v1.0.0.
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
  /node/network:
    get:
      tags:
      - node
      summary: Get network information of the node.
      description: Returns network related information of the node.
      operationId: getNodeNetworking
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeNetwork'
  /node/transaction-pool:
    get:
      tags:
        - node
      summary: Get the transaction pool of the node.
      description: >-
        Returns the extrinsics that the node knows of that have not been
        included in a block.
      operationId: getNodeTransactionPool
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  pool:
                    type: array
                    items:
                      $ref: '#/components/schemas/Extrinsic'
  /node/version:
    get:
      tags:
      - node
      summary: Get version information of the node.
      description: Returns versioning information of the node.
      operationId: getNodeVersion
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeVersion'
  /transaction:
    post:
      tags:
        - transaction
      summary: Submit a transaction to be included in the blockchain
      description: >-
        Accepts a valid signed extrinsic. Replaces `/tx` from versions < v1.0.0.
      operationId: submitTransaction
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSuccess'
        '400':
          description: invalid transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFailure'
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
  /transaction/dry-run:
    post:
      tags:
        - transaction
      summary: dry run an extrinsic
      description: >-
        Use the dryrun call to practice submission of a transaction. A fee will
        be charged, but the extrinsic will not produce other state change.
      operationId: dryrunTransaction
      responses:
        '200':
          description: successful operation
          # TODO
        '400':
          description: invalid transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFailure'
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
  /transaction/fee-estimate:
    post:
      tags:
        - transaction
      summary: Receive a fee estimate for a transaction.
      description: >-
        Send a serialized transaction and receive back a naive fee estimate.
        Replaces `/tx/fee-estimate` from versions < v1.0.0.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFeeEstimate'
        '400':
          description: invalid transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFailure'
  /transaction/material:
    get:
      tags:
        - transaction
      summary: Get the baseline material to construct a transaction.
      description: >-
        Returns the material that is universal to constructing any signed
        extrinsic offline. Replaces `/tx/artifacts` from versions < v1.0.0.
      operationId: getTransactionMaterial
      parameters:
        - name: at
          in: query
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionMaterial'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pallets/staking/progress:
    get:
      tags:
        - pallets
        - staking
      summary: Get a progress report on the chains staking system.
      description: >-
        Returns information on the progress of key components of the staking
        system and estimates of future points of interest.
        Replaces `/staking-info` from versions < v1.0.0.
      operationId: getStakingProgress
      parameters:
        - name: at
          in: query
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingProgress'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pallets:
    get:
      tags:
      - pallets
      summary: Get a list of pallets used in the runtime.
      description: >-
        Returns an array of palletIds for pallets that are used in the runtime.
      parameters:
      - name: only-names
        in: query
        description: Only return the names of pallets.
        required: false
        schema:
          type: boolean
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      at:
                        $ref: '#/components/schemas/BlockIdentifiers'
                      pallets:
                        type: array
                        items:
                          $ref: '#/components/schemas/Pallet'
                  - type: object
                    properties:
                      at:
                        $ref: '#/components/schemas/BlockIdentifiers'
                      pallets:
                        type: array
                        items:
                          type: string
                    description: Array of pallet names from the runtime
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/constants':
    get:
      tags:
      - pallets
      summary: Get a list of the queryable constants for a pallet.
      description: >-
        Returns a list of constant metadata for queryable constants items of the
        pallet specified by palletId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to query the constant of.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    at:
                      $ref: '#/components/schemas/BlockIdentifiers'
                    constants:
                      type: array
                      items:
                        $ref: '#/components/schemas/PalletConstant'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find pallet with with palletId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/constants/{constantId}':
    get:
      tags:
      - pallets
      summary: Get the value of a constant.
      description: Returns the value stored under the constantId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to query the constant of.
        required: true
        schema:
          type: string
      - name: constantId
        in: path
        description: Id of the constant to query for.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  value:
                    type: string
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find resource with with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/dispatchables':
    get:
      tags:
      - pallets
      summary: Get a list of the dispatchables for a pallet.
      description: >-
        Returns a list of metadata for dispatchables of the specified palletId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to get the metadata of its dispatchables.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  dispatchables:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dispatchable'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find pallet with with palletId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/dispatchables/{dispatchableId}':
    get:
      tags:
      - pallets
      summary: Get the metadata of a dispatchable.
      description: Returns the metadata of a dispatchable with dispatchableId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to get the dispatchable of.
        required: true
        schema:
          type: string
      - name: dispatchableId
        in: path
        description: Index of the dispatchable in the pallet's dispatchable array.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    at:
                      $ref: '#/components/schemas/BlockIdentifiers'
                    dispatchable:
                      $ref: '#/components/schemas/Dispatchable'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find resource with with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/errors':
    get:
      tags:
      - pallets
      summary: Get a list of the errors for a pallet.
      description: >-
        Returns a list of metadata for errors of the specified palletId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to get the metadata of its errors.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/PalletErrors'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find pallet with palletId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/errors/{errorId}':
    get:
      tags:
      - pallets
      summary: Get the metadata of an error.
      description: Returns the metadata of an error with errorId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to the error of.
        required: true
        schema:
          type: string
      - name: errorId
        in: path
        description: Index of the error in the pallet's errors array.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    at:
                      $ref: '#/components/schemas/BlockIdentifiers'
                    error:
                      $ref: '#/components/schemas/PalletError'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find resource with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/events':
    get:
      tags:
      - pallets
      summary: Get a list of events for a pallet.
      description: >-
        Returns a list of metadata for events of the specified palletId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to get the metadata of its events.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/PalletEvents'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find pallet with palletId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/events/{eventId}':
    get:
      tags:
      - pallets
      summary: Get the metadata of an event.
      description: Returns the metadata of an event with eventId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to the event of.
        required: true
        schema:
          type: string
      - name: eventId
        in: path
        description: Index of the event in the pallet's events array.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    at:
                      $ref: '#/components/schemas/BlockIdentifiers'
                    event:
                      $ref: '#/components/schemas/PalletEvent'
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find resource with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/storage':
    get:
      tags:
      - pallets
      summary: Get a list of the queryable storage items for a pallet.
      description: >-
        Returns a list of storageItemIds for queryable storage
        items of the specified palletId.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to query the storage of.
        required: true
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: Array of storageItemIds.
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find pallet with palletId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pallets/{palletId}/storage/{storageItemId}':
    get:
      tags:
      - pallets
      summary: Get the value of a storage item.
      description: >-
        Returns value stored under the storageItemId. If it is a map,
        query param key1 is required. If the storage item is double map
        query params key1 and key2 are required.
      parameters:
      - name: palletId
        in: path
        description: Id of the pallet to query the storage of.
        required: true
        schema:
          type: string
      - name: storageItemId
        in: path
        description: Id of the storage item to query for.
        required: true
        schema:
          type: string
      - name: key1
        in: query
        description: >-
          Key for a map, or first key for a double map. Required for
          querying a map.
        required: false
        schema:
          type: string
      - name: key2
        in: query
        description: >-
          Second key for a double map. Required for querying a double map.
        required: false
        schema:
          type: string
      - name: at
        in: query
        description: Historic block to make query at.
        required: false
        schema:
          type: string
          format: unsignedInteger or $hex
          description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: >-
                  Successful query response type is dependent on the storage
                  item value.
        '400':
          description: invalid blockId supplied for at query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: could not find resource with with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /runtime/metadata:
    get:
      tags:
      - runtime
      summary: Get runtime in JSON form.
      description: Returns the runtime metadata as a JSON object.
      parameters:
        - name: at
          in: query
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: >-
                  Response is dependant on the runtime metadata contents.
  /runtime/code:
    get:
      tags:
      - runtime
      summary: Get the runtime wasm blob.
      description: Returns the runtime wasm blob in hex format.
      parameters:
        - name: at
          in: query
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  at:
                    $ref: '#/components/schemas/BlockIdentifiers'
                  code:
                    type: string
                    format: hex
  /runtime/spec:
    get:
      tags:
      - runtime
      summary: Get version information of the runtime.
      description: Returns version information related to the runtime.
      parameters:
        - name: at
          in: query
          description: Historic block to make query at.
          required: false
          schema:
            type: string
            format: unsignedInteger or $hex
            description: block identifier, as the block height or block hash.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeSpec'
components:
  requestBodies:
    Transaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
      required: true
  schemas:
    BalanceLock:
      type: object
      properties:
        id:
          type: string
          description: >-
            An identifier for this lock. Only one lock may be in existence for
            each identifier.
        amount:
          type: string
          format: unsignedInteger
          description: >-
            The amount below which the free balance may not drop with this lock
            in effect.
        reasons:
          type: string
          enum:
            - Fee = 0
            - Misc = 1
            - All = 2
          description: Reasons for withdrawing balance.
    AccountBalanceInfo:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        nonce:
          type: string
          format: unsignedInteger
          description: Account nonce.
        free:
          type: string
          format: unsignedInteger
          description: >-
            Free balance of the account. Not equivalent to _spendable_ balance.
            This is the only balance that matters in terms of most operations on
            tokens.
        reserved:
          type: string
          format: unsignedInteger
          description: Reserved balance of the account.
        miscFrozen:
          type: string
          format: unsignedInteger
          description: >-
            The amount that `free` may not drop below when withdrawing for
            anything except transaction fee payment.
        feeFrozen:
          type: string
          format: unsignedInteger
          description: >-
            The amount that `free` may not drop below when withdrawing
            specifically for transaction fee payment.
        locks:
          type: array
          items:
            $ref: '#/components/schemas/BalanceLock'
          description: >-
            Array of locks on a balance. There can be many of these on an
            account and they "overlap", so the same balance is frozen by
            multiple locks
      description: >-
        Substrate Reference:
        - FRAME System: https://crates.parity.io/frame_system/index.html
        - Balances Pallet: https://crates.parity.io/pallet_balances/index.html
        - `AccountInfo`: https://crates.parity.io/frame_system/struct.AccountInfo.html
        - `AccountData`: https://crates.parity.io/pallet_balances/struct.AccountData.html
        - `BalanceLock`: https://crates.parity.io/pallet_balances/struct.BalanceLock.html
    StakingLedger:
      type: object
      properties:
        stash:
          type: string
          format: ss58
          description: >-
            The stash account whose balance is actually locked and at stake.
        total:
          type: string
          format: unsignedInteger
          description: >-
            The total amount of the stash's balance that we are currently 
            accounting for.  Simply `active + unlocking`.
        active:
          type: string
          format: unsignedInteger
          description: >-
            The total amount of the stash's balance that will be at stake in 
            any forthcoming eras.
        unlocking:
          type: string
          format: unsignedInteger
          description: >-
            Any balance that is becoming free, which may eventually be transferred
            out of the stash (assuming it doesn't get slashed first). Represented
            as an array of objects, each with an `era` at which `value` will be unlocked.
        claimedRewards:
          type: array
          items:
            type: string
            format: unsignedInteger
          description: >-
            Array of eras for which the stakers behind a validator have claimed
            rewards. Only updated for _validators._
      description: >-
        The staking ledger.
    AccountStakingInfo:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        rewardDestination:
          type: string
          format: ss58
          enum:
          - Staked
          - Stash
          - Controller
          description: >-
            The account to which rewards will be paid. Can be 'Staked' 
            (Stash account, adding to the amount at stake), 'Stash' 
            (Stash address, not adding to the amount at stake), or 
            'Controller' (Controller address).
        controller:
          type: string
          format: ss58
          description: Controller address for the given Stash.
        numSlashingSpans:
          type: string
          format: unsignedInteger
          description: >-
            Number of slashing spans on Stash account; `null` if provided 
            address is not a Controller.
        stakingLedger:
          $ref: '#/components/schemas/StakingLedger'
      description: >-
        Substrate Reference:
        - Staking Pallet: https://crates.parity.io/pallet_staking/index.html
        - `RewardDestination`: https://crates.parity.io/pallet_staking/enum.RewardDestination.html
        - `Bonded`: https://crates.parity.io/pallet_staking/struct.Bonded.html
        - `StakingLedger`: https://crates.parity.io/pallet_staking/struct.StakingLedger.html
    VestingSchedule:
      type: object
      properties:
        locked:
          type: string
          format: unsignedInteger
          description: Number of tokens locked at start.
        perBlock:
          type: string
          format: unsignedInteger
          description: >-
            Number of tokens that gets unlocked every block after `startingBlock`.
        startingBlock:
          type: string
          format: unsignedInteger
          description: Starting block for unlocking(vesting).
      description: Vesting schedule for an account.
    AccountVestingInfo:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        vesting:
          $ref: '#/components/schemas/VestingSchedule'
      description: >-
        Substrate Reference:
        - Vesting Pallet: https://crates.parity.io/pallet_vesting/index.html
        - `VestingInfo`: https://crates.parity.io/pallet_vesting/struct.VestingInfo.html
    BlockIdentifiers:
      type: object
      properties:
        hash:
          type: string
          format: hexBlockHash
          description: The block's hash.
        height:
          type: string
          format: unsignedInteger
          description: Block height.
    DigestItem:
      type: object
      properties:
        type:
          type: string
        index:
          type: string
          format: unsignedInteger
        value:
          type: array
          items:
            type: string
    SanitizedEvent:
      type: object
      properties:
        method:
          type: string
        data:
          type: array
          items:
            type: string
    Signature:
      type: object
      description: 'Object with `signature` and `signer`, or `null` if unsigned.'
      properties:
        signature:
          type: string
          format: hex
        signer:
          type: string
          format: ss58
    PalletItemMetadataIndex:
      type: array
      items:
        type: string
        format: unsignedInteger
      description: >-
        Tuple where the first value is the index of the pallet in the filtered
        metadata and the second value is the index of the item in the pallet's
        array of the item type.
    PalletEvent:
      type: object
      properties:
        eventIndex:
          $ref: '#/components/schemas/PalletItemMetadataIndex'
        name:
          type: string
        args:
          type: array
          items:
            type: string
        documentation:
          type: array
          items:
            type: string
      description: Metadata of an event from a FRAME pallet.
    PalletError:
      type: object
      properties:
        errorIndex:
          $ref: '#/components/schemas/PalletItemMetadataIndex'
        name:
          type: string
        documentation:
          type: array
          items:
            type: string
      description: Metadata of an error from a FRAME pallet.
    PalletStorageType:
      type: object
      enum:
        - Plain:
          type: string
        - Map:
          properties:
            hash:
              type:
                string
            key:
              type: string
            value:
              type: string
            linked:
              type: boolean
    PalletStorageItem:
      type: object
      properties:
        storageItemIndex:
          $ref: '#/components/schemas/PalletItemMetadataIndex'
        name:
          type: string
        modifier:
          type: string
        type:
            $ref: '#/components/schemas/PalletStorageType'
        fallback:
          type: string
        documentation:
          type: array
          items:
            type: string
      description: Metadata of a storage item from a FRAME pallet.
    PalletConstant:
      type: object
      properties:
        constantIndex:
          $ref: '#/components/schemas/PalletItemMetadataIndex'
        name:
          type: string
        type:
          type: string
        value:
          type: string
        documentation:
          type: array
          items:
            type: string
      description: Metadata of a constant from a FRAME pallet.
    DispatchableArg:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      description: Metadata of a parameter to a dispatchable call from a FRAME pallet.
    Dispatchable:
      type: object
      properties:
        callIndex:
          $ref: '#/components/schemas/PalletItemMetadataIndex'
        name:
          type: string
        args:
          type: array
          items:
            $ref: '#/components/schemas/DispatchableArgs'
        documentation:
          type: array
          items:
            type: string
      description: Metadata of a dispatchable call from a FRAME pallet.
    PalletStorage:
      type: object
      properties:
        prefix:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/PalletStorageItem'
    Pallet:
      type: object
      properties:
        index:
          type: string
          format: unsignedInteger
        name:
          type: string
        storage:
          $ref: '#/components/schemas/PalletStorageItem'
        calls:
          type: array
          items:
            $ref: '#/components/schemas/Dispatchable'
        events:
          type: array
          items:
            $ref: '#/components/schemas/PalletEvent'
        constants:
          type: array
          items:
            $ref: '#/components/schemas/PalletConstant'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/PalletError'
      description: Metadata of a FRAME pallet.
    RuntimeDispatchInfo:
      type: object
      description: RuntimeDispatchInfo for the transaction. Includes the `partialFee`.
      properties:
        weight:
          type: string
          description: Extrinsic weight.
        class:
          type: string
          description: Extrinsic class.
          enum:
            - Normal
            - Operational
            - Mandatory
        partialFee:
          type: string
          format: unsignedInteger
          description: 'Transaction fee, not including any tip.'
    Extrinsic:
      type: object
      properties:
        method:
          type: string
          description: 'Extrinsic method, `{module}.{function}`.'
        signature:
          $ref: '#/components/schemas/Signature'
        nonce:
          type: string
          format: unsignedInteger
          description: 'Account nonce, if applicable.'
        args:
          type: object
          description: Object of arguments keyed by parameter name.
        tip:
          type: string
          format: unsignedInteger
          description: Any tip added to the transaction.
        hash:
          type: string
          format: hex
          description: The transaction's hash.
        info:
          $ref: '#/components/schemas/RuntimeDispatchInfo'
        events:
          type: array
          items:
            $ref: '#/components/schemas/SanitizedEvent'
          description: >-
            An array of `SanitizedEvent`s that occurred during extrinsic
            execution.
        success:
          type: boolean
          description: Whether or not the extrinsic succeeded.
        paysFee:
          type: boolean
          description: >-
            Whether the extrinsic requires a fee. Careful! This field relates to
            whether or not the extrinsic requires a fee if called as a
            transaction. Block authors could insert  the extrinsic as an
            inherent in the block and not pay a fee. Always check that `paysFee`
            is `true` and that the extrinsic is signed when reconciling old
            blocks.
    Block:
      type: object
      properties:
        identifiers:
          $ref: '#/components/schemas/BlockIdentifiers'
        parentHash:
          type: string
          format: hex
          description: The hash of the parent block.
        stateRoot:
          type: string
          format: hex
          description: The state root after executing this block.
        extrinsicRoot:
          type: string
          format: hex
          description: The Merkle root of the extrinsics.
        authorId:
          type: string
          format: ss58
          description: >-
            The account ID of the block author (may be undefined for some
            chains).
        logs:
          type: array
          items:
            $ref: '#/components/schemas/DigestItem'
        onInitialize:
          type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/SanitizedEvent'
          description: >-
            Object with an array of `SanitizedEvent`s that occurred during block
            initialization with the `method` and `data` for each.
        extrinsics:
          type: array
          items:
            $ref: '#/components/schemas/Extrinsic'
          description: Array of extrinsics (inherents and transactions) within the block.
        onFinalize:
          type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/SanitizedEvent'
          description: >-
            Object with an array of `SanitizedEvent`s that occurred during block
            initialization with the `method` and `data` for each.
      description: >-
        Block finalization does not correspond to consensus, i.e. whether the
        block is in the canonical chain. It denotes the finalization of block
        _construction._
    NodeVersion:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        version:
          type: string
          description: Node's implementation's version.
        name:
          type: string
          description: Node's implementation name.
        chain:
          type: string
          description: Chain's name.
      description: >-
        Version information of the node.
    NodeRole:
      type: object
      enum:
        - Full
        - LightClient
        - Authority
        - Sentry
      description: Role the node is running.
    PeerInfo:
      type: object
      properties:
        peerId:
          type: string
          description: Peer ID
        roles:
          type: string
          description: roles
        protocolVersion:
          type: string
          format: unsignedInteger
          description: Protocol version.
        bestHash:
          type: string
          format: hex
          description: Peer best block hash.
        bestNumber:
          type: string
          format: unsignedInteger
          description: Peer
    NodeNetwork:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        nodeRoles:
          $ref: '#/components/schemas/NodeRoles'
        peers:
          type: string
          format: unsignedInteger
          description: Number of peers the node is connected too.
        isSyncing:
          type: boolean
          description: >-
            Wether or not the node is actively catching up with the chain.
        shouldHavePeers:
          type: boolean
          description: >-
            Wether or the node should be connected to peers. Might be false for
            local chains or when running without discovery.
        localPeerId:
          type: string
          description: Local copy of the `PeerId` of the local node.
        localListenAddresses:
          type: array
          items:
            type: string
          description: >-
            Multiaddresses that the local node is listening on. The addresses
            include a trailing `/p2p/` with the local PeerId, and are thus
            suitable to be passed to `system_addReservedPeer` or as a bootnode
            address for example.
        systemPeers:
          type: array
          items:
            $ref: '#/components/schemas/PeerInfo'
      description: Network information of the node connected to sidecar.
    RuntimeSpec:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        authoringVersion:
          type: string
          description: >-
            The version of the authorship interface. An authoring node will not
            attempt to author blocks unless this is equal to its native runtime.
        chainType:
          type: object
          enum:
            - Development
            - Local
            - Live
            - Custom:
                type: string
          description: Type of the chain.
        implVersion:
          type: string
          description: >-
            Version of the implementation of the specification.
            Non-consensus-breaking optimizations are about the only changes that
            could be made which would result in only the `impl_version` changing.
        specName:
          type: string
          description: Identifies the different Substrate runtimes.
        specVersion:
          type: string
          description: version of the runtime specification
        transactionVersion:
          type: string
          description: >-
            All existing dispatches are fully compatible when this number
            doesn't change. This number must change when an existing
            dispatchable (module ID, dispatch ID) is changed, either through an
            alteration in its user-level semantics, a parameter added/removed/
            changed, a dispatchable being removed, a module being removed, or a
            dispatchable/module changing its index.
        properties:
          type: object
          description: Arbitrary properties defined in the chain spec.
      description: Version information related to the runtime.
    UnappliedSlash:
      type: object
      properties:
        validator:
          type: string
          format: ss58
          description: Stash account ID of the offending validator.
        own:
          type: string
          format: unsignedInteger
          description: The amount the validator will be slashed.
        others:
          type: array
          items:
            type: string
            format: 'tuple(ss58, unsignedInteger)'
          description: >-
            Array of tuples of (accountId, amount) representing all the stashes
            of other slashed stakers and the amount they will be slashed.
        reporters:
          type: array
          items:
            type: string
            format: ss58
          description: Array of account IDs of the reporters of the offense.
        payout:
          type: string
          format: unsignedInteger
          description: Amount of bounty payout to reporters.
    ElectionStatus:
      type: object
      properties:
        status:
          type: object
          description: >-
            Era election status; either `Close; null` or `Open; <BlockNumber>`.
            A status of `Close` indicates that the submission window for
            solutions from off-chain Phragmen is not open. A status of `Open`
            indicates the submission window for off-chain Phragmen solutions.
          enum:
            - Close:
              type: null
            - Open:
              type: string
              format: unsignedInteger
        toggleEstimate:
          type: string
          format: unsignedInteger
          description: >-
            Upper bound estimate of the block height at which the `status` will
            switch.
    StakingProgress:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        activeEra:
          type: string
          format: unsignedInteger
        forceEra:
          type: string
          description: Current status of era forcing.
          enum:
            - ForceNone
            - NotForcing
            - ForceAlways
            - ForceNew
        nextActiveEraEstimate:
          type: string
          format: unsignedInteger
          description: >-
            Upper bound estimate of the block height at which the next active
            era will start. Not included in response when
            `forceEra.isForceNone`.
        nextSessionEstimate:
          type: string
          format: unsignedInteger
          description: >-
            Upper bound estimate of the block height at which the next session
            will start.
        unappliedSlashes:
          type: array
          items:
            $ref: '#/components/schemas/UnappliedSlash'
        electionStatus:
          $ref: '#/components/schemas/ElectionStatus'
        idealValidatorCount:
          type: string
          format: unsignedInteger
          description: >-
            Upper bound of validator set size; considered the ideal size. Not
            included in response when `forceEra.isForceNone`.
        validatorSet:
          type: array
          items:
            type: string
            format: ss58
          description: >-
            Stash account IDs of the validators for the current session. Not
            included in response when `forceEra.isForceNone`.
    Transaction:
      type: object
      properties:
        transaction:
          type: string
          format: hex
    TransactionMaterial:
      type: object
      properties:
        at:
          $ref: '#/components/schemas/BlockIdentifiers'
        genesisHash:
          type: string
          format: blockHash
          description: The hash of the chain's genesis block.
        chainName:
          type: string
          description: The chain's name.
        specName:
          type: string
          description: The chain's spec.
        specVersion:
          type: string
          description: The spec version. Always increased in a runtime upgrade.
        txVersion:
          type: string
          description: >-
            The transaction version. Common `txVersion` numbers indicate that
            the transaction encoding format and method indices are the same.
            Needed for decoding in an offline environment. Adding new
            transactions does not change `txVersion`.
        metadata:
          type: string
          format: hexScaleEncoded
          description: The chain's metadata in hex format.
    TransactionSuccess:
      type: object
      properties:
        txHash:
          type: string
          description: The hash of the encoded transaction.
    TransactionFailure:
      type: object
      properties:
        error:
          type: string
          description: >-
            Failed to parse a tx or Failed to submit tx. In the case of the
            former, the Sidecar was unable to parse the transaction and never
            even submitted it to the client. In the case of the latter, the
            transaction queue rejected the transaction. For a dryrun the client
            error would likely be Unable to dry run extrinsic.
        data:
          type: string
          description: >-
            The hex-encoded extrinsic. Only present if Sidecar fails to parse a
            transaction.
        cause:
          type: string
          description: The error message from parsing or from the client.
    TransactionFeeEstimate:
      type: object
      properties:
        weight:
          type: string
          description: Extrinsic weight.
        class:
          type: string
          description: Extrinsic class.
          enum:
            - Normal
            - Operational
            - Mandatory
        partialFee:
          type: string
          format: unsignedInteger
          description: >-
            Expected inclusion fee for the transaction. Note that the fee rate
            changes. up to 30% in a 24 hour period and this will not be the
            exact fee.
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        stack:
          type: string